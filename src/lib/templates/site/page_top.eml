<%# (cv: Resume.t') %>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title><%- cv.firstname %> <%- cv.lastname %>'s personal page</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Fira+Sans&display=swap" rel="stylesheet"> 

    <script src="js/rhill-voronoi-core.js"></script>
    <script src="https://kit.fontawesome.com/0c027fe19b.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.12.11/paper-full.min.js"></script>
    <script type="text/paperscript"  canvas="canvas-1">
      var voronoi =  new Voronoi();
      var sites = generateBeeHivePoints(view.size / 50, true);
      var bbox, diagram;
      var oldSize = view.size;
      var spotColor = new Color('rgba(240, 84, 76, 0.66)');
      var mousePos = view.center;
      var selected = false;

      onResize();

      function onMouseDown(event) {
          sites.push(event.point);
          renderDiagram();
      }

      function onMouseMove(event) {
          mousePos = event.point;
          if (event.count == 0)
              sites.push(event.point);
          sites[sites.length - 1] = event.point;
          renderDiagram();
      }

      function renderDiagram() {
          project.activeLayer.children = [];
          var diagram = voronoi.compute(sites, bbox);
          if (diagram) {
              for (var i = 0, l = sites.length; i < l; i++) {
                  var cell = diagram.cells[sites[i].voronoiId];
                  if (cell) {
                      var halfedges = cell.halfedges,
                          length = halfedges.length;
                      if (length > 2) {
                          var points = [];
                          for (var j = 0; j < length; j++) {
                              v = halfedges[j].getEndpoint();
                              points.push(new Point(v));
                          }
                          createPath(points, sites[i]);
                      }
                  }
              }
          }
      }

      function removeSmallBits(path) {
          var averageLength = path.length / path.segments.length;
          var min = path.length / 50;
          for(var i = path.segments.length - 1; i >= 0; i--) {
              var segment = path.segments[i];
              var cur = segment.point;
              var nextSegment = segment.next;
              var next = nextSegment.point + nextSegment.handleIn;
              if (cur.getDistance(next) < min) {
                  segment.remove();
              }
          }
      }

      function generateBeeHivePoints(size, loose) {
          var points = [];
          var col = view.size / size;
          for(var i = -1; i < size.width + 1; i++) {
              for(var j = -1; j < size.height + 1; j++) {
                  var point = new Point(i, j) / new Point(size) * view.size + col / 2;
                  if(j % 2)
                      point += new Point(col.width / 2, 0);
                  if(loose)
                      point += (col) * Point.random() - col / 4;
                  points.push(point);
              }
          }
          return points;
      }
      function createPath(points, center) {
          var path = new Path();
          if (!selected) { 
              path.strokeColor = spotColor;
          } else {
              path.fullySelected = selected;
          }
          path.closed = true;

          for (var i = 0, l = points.length; i < l; i++) {
              var point = points[i];
              var next = points[(i + 1) == points.length ? 0 : i + 1];
              var vector = (next - point) / 2;
              path.add({
                  point: point + vector,
                  handleIn: -vector,
                  handleOut: vector
              });
          }
          path.scale(0.95);
          removeSmallBits(path);
          return path;
      }

      function onResize() {
          var margin = 5;
          bbox = {
              xl: margin,
              xr: view.bounds.width - margin,
              yt: margin,
              yb: view.bounds.height - margin
          };
          for (var i = 0, l = sites.length; i < l; i++) {
              sites[i] = sites[i] * view.size / oldSize;
          }
          oldSize = view.size;
          renderDiagram();
      }

      /*function onKeyDown(event) {
          if (event.key == 'space') {
              selected = !selected;
              renderDiagram();
          }
      }*/
    </script>
  </head>
  <body>
    <header>
      <canvas resize="true" id="canvas-1" style="user-select: none;" data-paper-scope="1"></canvas>
      <h1>
        <a href="/"><%- cv.firstname %> <%- cv.lastname %></a>
      </h1>
    </header>
    <div id="body">